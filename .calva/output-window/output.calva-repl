; This is the Calva evaluation results output window.
; TIPS: The keyboard shortcut `ctrl+alt+c o` shows and focuses this window
;   when connected to a REPL session.
; Please see https://calva.io/output/ for more info.
; Happy coding! ♥️

; Jacking in...
; Starting Jack-in Terminal: cmd.exe /d /c lein update-in :dependencies conj [nrepl,"0.8.3"] -- update-in :plugins conj [cider/cider-nrepl,"0.26.0"] -- update-in [:repl-options,:nrepl-middleware] conj '["cider.nrepl/cider-middleware"]' -- with-profile +uberjar repl :headless
; Hooking up nREPL sessions...
; Connected session: clj
; TIPS: 
;   - You can edit the contents here. Use it as a REPL if you like.
;   - `alt+enter` evaluates the current top level form.
;   - `ctrl+enter` evaluates the current form.
;   - `alt+up` and `alt+down` traverse up and down the REPL command history
;      when the cursor is after the last contents at the prompt
;   - Clojure lines in stack traces are peekable and clickable.
clj꞉binary-tree-clojure.core꞉>  ; Use `alt+enter` to evaluate
; Jack-in done.
clj꞉binary-tree-clojure.core꞉> 
; Evaluating file: core.clj
#'binary-tree-clojure.core/-main
clj꞉binary-tree-clojure.core꞉> 
(-main)
🌳 binary tree 🌳 

 enter a non numeric value to exit
new root {:value 1}
new root {:value 1, :right {:value 2}}
new root {:value 1, :right {:value 2, :right {:value 3}}}
new root {:value 1, :right {:value 2, :right {:value 3, :right {:value 4}}}}
exiting... #error {
 :cause For input string: "a"
 :via
 [{:type java.lang.NumberFormatException
   :message For input string: "a"
   :at [java.lang.NumberFormatException forInputString nil -1]}]
 :trace
 [[java.lang.NumberFormatException forInputString nil -1]
  [java.lang.Integer parseInt nil -1]
  [java.lang.Integer <init> nil -1]
  [sun.reflect.NativeConstructorAccessorImpl newInstance0 nil -2]
  [sun.reflect.NativeConstructorAccessorImpl newInstance nil -1]
  [sun.reflect.DelegatingConstructorAccessorImpl newInstance nil -1]
  [java.lang.reflect.Constructor newInstance nil -1]
  [clojure.lang.Reflector invokeConstructor Reflector.java 305]
  [binary_tree_clojure.core$add_node_from_user_input invokeStatic core.clj 28]
  [binary_tree_clojure.core$add_node_from_user_input invokeStatic core.clj 28]
  [binary_tree_clojure.core$add_node_from_user_input invokeStatic core.clj 28]
  [binary_tree_clojure.core$add_node_from_user_input invokeStatic core.clj 28]
  [binary_tree_clojure.core$add_node_from_user_input in
vokeStatic core.clj 28]
  [binary_tree_clojure.core$add_node_from_user_input invokeStatic core.clj 28]
  [binary_tree_clojure.core$_main invokeStatic core.clj 36]
  [binary_tree_clojure.core$_main doInvoke core.clj 36]
  [clojure.lang.RestFn invoke RestFn.java 397]
  [binary_tree_clojure.core$eval7297 invokeStatic form-init5382101393117288718.clj 24]
  [binary_tree_clojure.core$eval7297 invoke form-init5382101393117288718.clj 24]
  [clojure.lang.Compiler eval Compiler.java 7177]
  [clojure.lang.Compiler eval Compiler.java 7132]
  [clojure.core$eval invokeStatic core.clj 3214]
  [clojure.core$eval invoke core.clj 3210]
  [nrepl.middleware.interruptible_eval$evaluate$fn__953$fn__954 invoke interruptible_eval.clj 87]
  [clojure.lang.AFn applyToHelper AFn.java 152]
  [clojure.lang.AFn applyTo AFn.java 144]
  [clojure.core$apply invokeStatic core.clj 665]
  [clojure.core$with_bindings_STAR_ invokeStatic core.clj 1973]
  [clojure.core$with_bindings_STAR_ doInvoke core.clj 1973]
  [clojure.lang.RestFn invoke RestFn.
java 425]
  [nrepl.middleware.interruptible_eval$evaluate$fn__953 invoke interruptible_eval.clj 87]
  [clojure.main$repl$read_eval_print__9086$fn__9089 invoke main.clj 437]
  [clojure.main$repl$read_eval_print__9086 invoke main.clj 437]
  [clojure.main$repl$fn__9095 invoke main.clj 458]
  [clojure.main$repl invokeStatic main.clj 458]
  [nrepl.middleware.interruptible_eval$evaluate invokeStatic interruptible_eval.clj 115]
  [nrepl.middleware.interruptible_eval$interruptible_eval$fn__984$fn__988 invoke interruptible_eval.clj 150]
  [clojure.lang.AFn run AFn.java 22]
  [nrepl.middleware.session$session_exec$main_loop__1051$fn__1055 invoke session.clj 202]
  [nrepl.middleware.session$session_exec$main_loop__1051 invoke session.clj 201]
  [clojure.lang.AFn run AFn.java 22]
  [java.lang.Thread run nil -1]]}
nil
clj꞉binary-tree-clojure.core꞉> 
#'binary-tree-clojure.core/add-node-in
clj꞉binary-tree-clojure.core꞉> 
#'binary-tree-clojure.core/add-node
clj꞉binary-tree-clojure.core꞉> 
; Evaluating file: core.clj
#'binary-tree-clojure.core/-main
clj꞉binary-tree-clojure.core꞉> 
(-main)
🌳 binary tree 🌳 

 enter a non numeric value to exit
exiting...
nil
clj꞉binary-tree-clojure.core꞉> 
(-main)
; Evaluating file: core.clj
#'binary-tree-clojure.core/-main
clj꞉binary-tree-clojure.core꞉> 
(-main)
🌳 binary tree 🌳 

 enter a non numeric value to exit
new root {:value 1}
new root {:value 1, :right {:value 2}}
new root {:value 1, :right {:value 2}, :left {:value -1}}
No input provided.
exiting...
nil
clj꞉binary-tree-clojure.core꞉> 
; Evaluating file: core.clj
#'binary-tree-clojure.core/-main
clj꞉binary-tree-clojure.core꞉> 
(-main)
🌳 binary tree 🌳 

 enter a non numeric value to exit
new root
 {:value 1} 


new root
 {:value 1, :right {:value 2}} 


new root
 {:value 1, :right {:value 2, :right {:value 3}}} 


new root
 {:value 1, :right {:value 2, :right {:value 3}}, :left {:value -1}} 


new root
 {:value 1, :right {:value 2, :right {:value 3}}, :left {:value -1, :left {:value -5}}} 


new root
 {:value 1, :right {:value 2, :right {:value 3}}, :left {:value -1, :left {:value -5, :right {:value -3}}}} 


exiting...
nil
clj꞉binary-tree-clojure.core꞉> 
